datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Redirect  Redirect[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Int
  image       String?
  stock       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Markdown {
  id       String  @id @default(cuid())
  category String
  title    String
  subtitle String?
  content  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, subtitle])
}

model Redirect {
  id   String @id @default(cuid())
  slug String @unique
  url  String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model UrlEvent {
  id String @id @default(cuid())

  url String

  isBot        Boolean
  ua           String
  browserName  String?
  deviceModel  String?
  deviceType   String?
  deviceVendor String?
  engineName   String?
  osName       String?
  cpuArch      String?

  createdAt DateTime @default(now())
}
