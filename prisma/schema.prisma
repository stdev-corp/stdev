datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  redirects Redirect[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Markdown {
  id String @id @default(cuid())

  category String
  title    String
  subtitle String?
  content  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, subtitle])
}

model Redirect {
  id String @id @default(cuid())

  slug String @unique
  url  String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model UrlEvent {
  id String @id @default(cuid())

  url String

  isBot        Boolean
  ua           String
  browserName  String?
  deviceModel  String?
  deviceType   String?
  deviceVendor String?
  engineName   String?
  osName       String?
  cpuArch      String?

  createdAt DateTime @default(now())
}

enum RecordType {
  REGULAR_GENERAL_MEETING
  EXTRAORDINARY_GENERAL_MEETING
  INAUGURAL_GENERAL_MEETING
  REGULAR_BOARD_MEETING
  EXTRAORDINARY_BOARD_MEETING
}

model Record {
  id String @id @default(cuid())

  type   RecordType
  title  String
  date   DateTime
  pdfUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id String @id @default(cuid())

  title     String
  slug      String   @unique
  startDate DateTime
  endDate   DateTime
  location  String

  institutions EventInstitution[]
  webpages     Webpage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Institution {
  id String @id @default(cuid())

  name     String
  imageUrl String

  events EventInstitution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventInstitutionType {
  HOST
  ORGANIZER
  PARTNER
  SPONSOR
}

model EventInstitution {
  id String @id @default(cuid())

  type  EventInstitutionType
  order Int

  eventId       String
  event         Event       @relation(fields: [eventId], references: [id])
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WebpageType {
  PRESS_RELEASE
  NEWS_ARTICLE
  BLOG_POST
}

model Webpage {
  id String @id @default(cuid())

  url    String
  title  String
  author String
  date   DateTime
  type   WebpageType

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(cuid())

  name        String
  description String?
  price       Int
  image       String?
  stock       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
